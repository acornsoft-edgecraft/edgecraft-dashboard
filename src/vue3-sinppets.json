{
    // Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Vue3 SingleFileComponent": {
        "prefix": "v3file",
        "body": [
            "<template>",
            "<div></div>",
            "</template>",
            "",
            "<script setup lang=\"ts\">",
            "</script>",
            "",
            "<style scoped lang=\"scss\">",
            "</style>"
        ]
    },
    "Vue3 Page": {
        "prefix": "v3page",
        "body": [
            "<template>",
            "<div class=\"page-container\">",
            "<div class=\"page-wrapper\">",
            "<section class=\"page-header\">",
            "<K3PageTitle />",
            "</section>",
            "<section class=\"page-content\">",
            "<!-- Content here -->",
            "</section>",
            "</div>",
            "</div>",
            "</template>",
            "",
            "<script setup lang=\"ts\">",
            "/**",
            "  * 여기서는 해당 화면 생성 이전에 처리할 설정을 구성합니다.",
            "  * this 등의 사용이 불가능합니다.",
            "  */",
            "// imports",
            "// Page meta",
            "definePageMeta({ layout: 'default', title: '$title', public: false })",
            "// Props",
            "// const props = defineProps({}),",
            "// Emits",
            "// const emits = defineEmits(['eventname']),",
            "// Properties",
            "// Compputed",
            "// Watcher",
            "// Methods",
            "// Events",
            "// Logics (like api call, etc)",
            "</script>",
            "",
            "<style scoped lang=\"scss\">",
            "</style>"
        ]
    },
    "Vue3 List Page": {
        "prefix": "v3page-list",
        "body": [
            "<template>",
            "  <div class=\"page-container\">",
            "    <div class=\"page-wrapper\">",
            "      <section class=\"page-header\">",
            "        <K3PageTitle />",
            "      </section>",
            "      <section class=\"page-content\">",
            "        <K3DataTable",
            "          :value=\"events\"",
            "          v-model:filters=\"filter\"",
            "          v-model:selection=\"selectedItem\"",
            "          dataKey=\"name\"",
            "          :autoLayout=\"true\"",
            "          :scrollable=\"true\"",
            "          scrollHeight=\"calc(100vh - 150px)\"",
            "          selectionMode=\"single\"",
            "          removableSort",
            "          :rows=\"10\"",
            "          :paginator=\"true\"",
            "          paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"",
            "          :rowsPerPageOptions=\"[5, 10, 20, 50]\"",
            "          currentPageReportTemplate=\"({first}~{last}) of {totalRecords}\"",
            "          :loading=\"isFetch\"",
            "          @rowSelect=\"rowSelected\"",
            "          @rowUnselect=\"rowUnselected\"",
            "          stripedRows>",
            "          <template #header>",
            "            <div class=\"header flex justify-content-between\">",
            "              <div class=\"search-left\">",
            "                <K3Dropdown v-model=\"selectedNamespace\" :options=\"namespaces\" :optionLabel=\"'name'\" :optionValue=\"'value'\" class=\"mr-2\" @change=\"nsSelected\" />",
            "                <span class=\"p-input-icon-left\">",
            "                  <i class=\"pi pi-search\" />",
            "                  <K3InputText class=\"flex\" v-model=\"filter['global'].value\" placeholder=\"Search\" autofocus />",
            "                </span>",
            "              </div>",
            "              <div class=\"search-right toggle flex align-content-center\">",
            "                <K3MultiSelect class=\"flex\" :modelValue=\"selectedColumns\" :options=\"columns\" optionLabel=\"header\" @update:modelValue=\"toggle\" placeholder=\"Select Columns\" style=\"width: 20em\" />",
            "              </div>",
            "            </div>",
            "          </template>",
            "          <template #loading>",
            "            <K3ProgressSpinner style=\"width: 50px; height: 50px\" strokeWidth=\"8\" fill=\"var(--surface-ground)\" animationDuration=\".5s\" />",
            "          </template>",
            "          <template #empty>",
            "            <div class=\"w-full text-center\">",
            "              <p class=\"text-orange-500\">No records found.</p>",
            "            </div>",
            "          </template>",
            "          <K3Column v-for=\"(col, index) of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :sortable=\"col.sortable\" :key=\"`${col.field}_${index}`\" :headerStyle=\"columnSize(col.field)\" :bodyStyle=\"columnSize(col.field)\">",
            "            <template #body=\"slotProps\">",
            "              <span v-if=\"slotProps.field === 'involvedObject'\">",
            "                {{ slotProps.data.involvedObject.kind }} : <a href=\"#\" @click=\"showInvolvedObject(slotProps.data.involvedObject)\">{{ slotProps.data.involvedObject.name }}</a>",
            "              </span>",
            "              <span v-else-if=\"slotProps.field === 'source'\" v-for=\"(val, idx) in slotProps.data.source\" :key=\"idx\">{{ val }} </span>",
            "              <span v-else-if=\"slotProps.field === 'lastSeen'\" class=\"flex justify-content-end\">{{ UIHelper.getElapsedTime(slotProps.data.lastSeen) }}</span>",
            "              <span v-else-if=\"slotProps.field === 'creationTimestamp'\" class=\"flex justify-content-end\">{{ UIHelper.getElapsedTime(slotProps.data.creationTimestamp) }}</span>",
            "              <span v-else>{{ slotProps.data[slotProps.field] }}</span>",
            "            </template>",
            "          </K3Column>",
            "        </K3DataTable>",
            "        <K3Sidebar class=\"sidebar p-sidebar-lg\" v-model=\"viewModel\" v-model:visible=\"showResourceViewer\" :baseZInde=\"1000\" position=\"right\" :dismissable=\"false\" :showCloseIcon=\"false\" :modal=\"false\">",
            "          <BizResourceViewer class=\"detail-view\" v-model=\"viewModel\" @close=\"showResourceViewer = false\" @deleted=\"deleted\" />",
            "        </K3Sidebar>",
            "      </section>",
            "    </div>",
            "  </div>",
            "</template>",
            "<script setup lang=\"ts\">",
            "/**",
            " * 여기서는 해당 화면 생성 이전에 처리할 설정을 구성합니다.",
            " * this 등의 사용이 불가능합니다.",
            " */",
            "// imports",
            "import { FilterMatchMode } from \"primevue/api\";",
            "// Page meta",
            "definePageMeta({ layout: \"default\", title: \"Events\", public: true });",
            "// Props",
            "// const props = defineProps({}),",
            "// Emits",
            "// const emits = defineEmits(['eventname']),",
            "// Properties",
            "const { events, isFetch, fetch } = ClusterService().getEvents();",
            "const namespaces = ref([",
            "  { name: \"All namespaces\", value: \"\" },",
            "  ...ClusterService().clusterInfo.value.namespaces.map((item) => {",
            "    return { name: item, value: item };",
            "  }),",
            "]);",
            "const selectedNamespace = ref(\"\");",
            "const viewModel = ref();",
            "const showResourceViewer = ref(false);",
            "const selectedItem = ref();",
            "const beforeSelectedItem = ref(\"\");",
            "const columns = ref([",
            "  { field: \"type\", header: \"Type\", sortable: true },",
            "  { field: \"message\", header: \"Message\", sortable: true },",
            "  { field: \"namespace\", header: \"Namespace\", sortable: true },",
            "  { field: \"involvedObject\", header: \"Involved Object\", sortable: true },",
            "  { field: \"source\", header: \"Source\", sortable: true },",
            "  { field: \"count\", header: \"Count\", sortable: true },",
            "  { field: \"lastSeen\", header: \"Last Seen\", sortable: true },",
            "  { field: \"creationTimestamp\", header: \"Age\", sortable: true },",
            "]);",
            "const selectedColumns = ref(columns.value);",
            "const filter = ref({",
            "  global: { value: null, matchMode: FilterMatchMode.CONTAINS }, // 전체 조회",
            "  namespace: { value: null, matchMode: FilterMatchMode.EQUALS }, // namespace 필드 조회",
            "});",
            "// Compputed",
            "// Watcher",
            "// Methods",
            "const nsSelected = (event) => {",
            "  console.log(`NAMESPACE > ${event.value}`);",
            "  filter.value.namespace.value = event.value;",
            "};",
            "const showInvolvedObject = (obj) => {",
            "  const resource = ClusterService().getResource(obj);",
            "  viewModel.value = ClusterService().getResourceViewLink(resource.group, resource.resource, obj.namespace, resource.name);",
            "  if (!showResourceViewer.value) showResourceViewer.value = true;",
            "};",
            "const columnSize = (field) => {",
            "  switch (field) {",
            "    case \"message\":",
            "      return \"min-width: 35%\";",
            "    case \"involvedObject\":",
            "      return \"min-width: 18%\";",
            "    case \"source\":",
            "      return \"min-width: 12%\";",
            "    case \"type\":",
            "    case \"creationTimestamp\":",
            "      return \"min-width: 5%;\";",
            "    case \"namespace\":",
            "    case \"count\":",
            "    case \"lastSeen\":",
            "      return \"min-width: 8%;\";",
            "  }",
            "};",
            "const toggle = (val) => {",
            "  selectedColumns.value = columns.value.filter((col) => val.includes(col));",
            "};",
            "const rowSelected = (event) => {",
            "  if (beforeSelectedItem.value === event.data.name && showResourceViewer.value) {",
            "    // 두번 선택한 경우는 Sidebar 종료하고 선택 삭제",
            "    showResourceViewer.value = false;",
            "    selectedItem.value = null;",
            "    beforeSelectedItem.value = \"\";",
            "  } else {",
            "    beforeSelectedItem.value = event.data.name;",
            "    viewModel.value = ClusterService().getResourceViewLink(\"\", \"events\", event.data.namespace, event.data.name);",
            "    showResourceViewer.value = true;",
            "  }",
            "};",
            "const rowUnselected = (event) => {",
            "  beforeSelectedItem.value = null;",
            "  showResourceViewer.value = false;",
            "};",
            "const deleted = () => {",
            "  fetch();",
            "};",
            "// Events",
            "onMounted(() => {",
            "  fetch();",
            "});",
            "// Logics (like api call, etc)",
            "</script>",
            "<style scoped lang=\"scss\">",
            ".page-content {",
            "  :deep(.p-progressbar-value) {",
            "    overflow: visible;",
            "    justify-content: start;",
            "    background-color: #17a2b8;",
            "  }",
            "  :deep(.p-datatable) {",
            "    .p-datatable-header {",
            "      border-top: none;",
            "    }",
            "  }",
            "}",
            "</style>"
        ]
    },
    "Vue3 Component": {
        "prefix": "v3comp",
        "body": [
            "<template>",
            "<div class=\"component-container\">",
            "<!-- Content here -->",
            "</div>",
            "</template>",
            "",
            "<script setup lang=\"ts\">",
            "/**",
            "  * 여기서는 해당 화면 생성 이전에 처리할 설정을 구성합니다.",
            "  * this 등의 사용이 불가능합니다.",
            "  */",
            "// imports",
            "// Props",
            "// const props = defineProps({})",
            "// Emits",
            "// const emits = defineEmits(['eventname'])",
            "// Properties",
            "// Compputed",
            "// Watcher",
            "// Methods",
            "// Events",
            "// Logics (like api call, etc)",
            "</script>",
            "",
            "<style scoped lang=\"scss\">",
            "</style>"
        ]
    },
    "Vue3 Partial Page": {
        "prefix": "v3partialpage",
        "body": [
            "<template>",
            "<div class=\"partial-container m-0 p-0\">",
            "$1",
            "</div>",
            "</template>",
            "",
            "<script setup lang=\"ts\">",
            "/**",
            "  * 여기서는 해당 화면 생성 이전에 처리할 설정을 구성합니다.",
            "  * this 등의 사용이 불가능합니다.",
            "  */",
            "// imports",
            "// Props",
            "// const props = defineProps({})",
            "// Emits",
            "// const emits = defineEmits(['eventname'])",
            "// Properties",
            "// Compputed",
            "// Watcher",
            "// Methods",
            "// Events",
            "onMounted(()=>{});",
            "// Logics (like api call, etc)",
            "</script>",
            "",
            "<style scoped lang=\"scss\">",
            "</style>"
        ]
    }
}